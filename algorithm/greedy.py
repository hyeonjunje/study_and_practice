"""
그리디(Greedy) 알고리즘은 '당장 눈 앞에 보이는 최적의 상황만을 쫒는 알고리즘'으로 가장 단순한 형태의 알고리즘이다.
그리디 알고리즘은 항상 최적의 결과를 도출하는 것은 아니지만 어느 정도 최적의 해에 근사한 값을 빠르게 구할 수 있다는 장점이 있다.
또한 재미있는 점은 '특정한 상황'에 있어서는 그리디 알고리즘이 최적의 해를 보장할 수도 있다는 점이다.

그리디 알고리즘의 대표적인 예제는 거스름 돈 문제이다. 거스름 돈을 줄 때 가장 적은 양의 화폐를 주는 것이 제일 편하다.
따라서 이런 경우 '무조건 더 큰 화폐 단위부터 거슬러 준다.'는 알고리즘만 지키면  최적의 해를 보장할 수 있다.
"""

def remain_money(a, n):
    """
    a 의 동전 배열
    n 거슬러 줘야 하는 돈
    return 하는 값 : 거슬러 준 동전의 갯수
    """

    cnt = 0

    for i in a[::-1]:
        cnt += n // i
        n = n % i

    return cnt

a = [10, 50, 100, 500]

print(remain_money(a, 5860))


"""
거스름 돈 같이 그리디 알고리즘이 최적의 해를 보장하는 경우도 많으나 애석하게도 최적의 해를 보장하지
못하는 경우가 더 많다. 드럴 때 다이나믹 프로그래밍(Dynamic Programming) 등의 기타 알고리즘 기법을 
적용해야 하기도 한다.
"""